// Generated by gencpp from file rt2_assignment1/PositionRequest.msg
// DO NOT EDIT!


#ifndef RT2_ASSIGNMENT1_MESSAGE_POSITIONREQUEST_H
#define RT2_ASSIGNMENT1_MESSAGE_POSITIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rt2_assignment1
{
template <class ContainerAllocator>
struct PositionRequest_
{
  typedef PositionRequest_<ContainerAllocator> Type;

  PositionRequest_()
    : x(0.0)
    , y(0.0)
    , theta(0.0)  {
    }
  PositionRequest_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , theta(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _theta_type;
  _theta_type theta;





  typedef boost::shared_ptr< ::rt2_assignment1::PositionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rt2_assignment1::PositionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PositionRequest_

typedef ::rt2_assignment1::PositionRequest_<std::allocator<void> > PositionRequest;

typedef boost::shared_ptr< ::rt2_assignment1::PositionRequest > PositionRequestPtr;
typedef boost::shared_ptr< ::rt2_assignment1::PositionRequest const> PositionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rt2_assignment1::PositionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rt2_assignment1::PositionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::rt2_assignment1::PositionRequest_<ContainerAllocator1> & lhs, const ::rt2_assignment1::PositionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.theta == rhs.theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::rt2_assignment1::PositionRequest_<ContainerAllocator1> & lhs, const ::rt2_assignment1::PositionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace rt2_assignment1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::rt2_assignment1::PositionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rt2_assignment1::PositionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rt2_assignment1::PositionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rt2_assignment1::PositionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt2_assignment1::PositionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rt2_assignment1::PositionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rt2_assignment1::PositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a130bc60ee6513855dc62ea83fcc5b20";
  }

  static const char* value(const ::rt2_assignment1::PositionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa130bc60ee651385ULL;
  static const uint64_t static_value2 = 0x5dc62ea83fcc5b20ULL;
};

template<class ContainerAllocator>
struct DataType< ::rt2_assignment1::PositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rt2_assignment1/PositionRequest";
  }

  static const char* value(const ::rt2_assignment1::PositionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rt2_assignment1::PositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
"float32 y\n"
"float32 theta\n"
;
  }

  static const char* value(const ::rt2_assignment1::PositionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rt2_assignment1::PositionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PositionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rt2_assignment1::PositionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rt2_assignment1::PositionRequest_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RT2_ASSIGNMENT1_MESSAGE_POSITIONREQUEST_H
